using AutoMapper;
using GP.BLL.Interfaces;
using GP.DAL.Data.Models;
using GP.PL.Helper;
using GP.PL.VIewModel;
using GP_BLL.Interfaces;
using GP_BLL.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using System.Drawing;
using System.Text.RegularExpressions;

namespace GP.PL.Controllers
{
    [AutoValidateAntiforgeryToken]
    [Authorize]
    public class AppointmentController : Controller
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly IMapper _mapper;
        private readonly ISpineProcessingService _spineProcessingService;

        public AppointmentController(IUnitOfWork unitOfWork, IMapper mapper,ISpineProcessingService spineProcessingService)
        {
            _unitOfWork = unitOfWork;
            _mapper = mapper;
            _spineProcessingService = spineProcessingService;
        }
        public IActionResult Index(int patientId)
        {
            var patient = _unitOfWork.PatientsRepositry.GetById(patientId);
            if (patient == null)
                return NotFound();

            var appointment = Enumerable.Empty<Appointment>();

            appointment = _unitOfWork.AppointmentsRepositry
                .GetAll()
                .Where(a => a.PatientId == patientId).OrderByDescending(a=>a.Date)
                .ToList();

            var mappedApp = _mapper.Map<IEnumerable<Appointment>, IEnumerable<AppointmentViewModel>>(appointment);

            var viewModel = new PatientAppointmentViewModel
            {
                Patient = patient,
                Appointments = mappedApp,
               
            };

            return View(viewModel);

        }
        [HttpGet]
        public IActionResult Create(int patientId)
        {
            var viewModel = new AppointmentViewModel
            {
                PatientId = patientId 
            };

            return View(viewModel);
        }
        [HttpPost]
        public IActionResult Create(AppointmentViewModel appVm)
        {
            if (ModelState.IsValid)
            {
                // Step 1: Upload the original .glb file
                appVm.OrginalPhotoPath = DocumentSettings.UpdloadFile(appVm.Image, "images");
                var mappedEmp = _mapper.Map<AppointmentViewModel, Appointment>(appVm);

                // Debug the path
                Console.WriteLine($"Uploaded file name: {appVm.OrginalPhotoPath}");

                // Step 2: Save the appointment to the database to get the Appointment.Id
                _unitOfWork.AppointmentsRepositry.Add(mappedEmp);
                var count = _unitOfWork.Complete();
                if (count <= 0)
                {
                    ModelState.AddModelError(string.Empty, "Failed to save the appointment.");
                    return View(appVm);
                }

                // Step 3: Create the folder structure: wwwroot/processed_images/Patient_{PatientId}/Appointment_{AppointmentId}
                string patientFolder = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "processed_images", $"Patient_{appVm.PatientId}");
                string appointmentFolder = Path.Combine(patientFolder, $"Appointment_{mappedEmp.Id}");
                Directory.CreateDirectory(appointmentFolder); // Creates both patient and appointment folders if they don't exist

                // Step 4: Process the .glb file
                string glbFilePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "images", appVm.OrginalPhotoPath);
                if (!System.IO.File.Exists(glbFilePath))
                {
                    ModelState.AddModelError(string.Empty, $"GLB file not found at: {glbFilePath}. Check the upload process.");
                    return View(appVm);
                }
                string stlPath = "E:\\Year 4\\sem2\\gp\\final\\Spine_NIH3D.stl";
                try
                {
                    _spineProcessingService.ProcessSpine(glbFilePath, stlPath, appointmentFolder);

                    // Step 5: Get the actual file names generated by the Python script
                    string baseFileName = Path.GetFileNameWithoutExtension(appVm.Image.FileName); // e.g., "Back_Image"
                    var allFiles = Directory.GetFiles(appointmentFolder, "*.html");
                    Console.WriteLine($"All HTML files found: {string.Join(", ", allFiles)}");

                    if (allFiles.Length == 3)
                    {
                        mappedEmp.ProcessedPhotoPath1 = $"/processed_images/Patient_{appVm.PatientId}/Appointment_{mappedEmp.Id}/{Path.GetFileName(allFiles[0])}";
                        mappedEmp.ProcessedPhotoPath2 = $"/processed_images/Patient_{appVm.PatientId}/Appointment_{mappedEmp.Id}/{Path.GetFileName(allFiles[1])}";
                        mappedEmp.ProcessedPhotoPath3 = $"/processed_images/Patient_{appVm.PatientId}/Appointment_{mappedEmp.Id}/{Path.GetFileName(allFiles[2])}";
                    }
                    else
                    {
                        ModelState.AddModelError(string.Empty, $"Expected 3 HTML files, but found {allFiles.Length}. Check the Python script output.");
                        return View(appVm);
                    }

                    // Step 6: Read and store the Cobb angle
                    var cobbAngleFiles = Directory.GetFiles(appointmentFolder, $"*{baseFileName}_cobb_angle.txt");
                    Console.WriteLine($"Cobb angle files found in {appointmentFolder}: {string.Join(", ", cobbAngleFiles)}");
                    string cobbAngleFile = cobbAngleFiles.FirstOrDefault();
                    if (cobbAngleFile != null)
                    {
                        string cobbAngleText = System.IO.File.ReadAllText(cobbAngleFile);
                        mappedEmp.CobbAngle = decimal.TryParse(Regex.Match(cobbAngleText, @"\d+\.\d+").Value, out decimal angle) ? angle : 0m;
                        Console.WriteLine($"Cobb angle parsed: {mappedEmp.CobbAngle}");
                    }
                    else
                    {
                        Console.WriteLine($"No Cobb angle file found for pattern *{baseFileName}_cobb_angle.txt in {appointmentFolder}");
                    }

                    // Update the appointment with the processed HTML file paths
                    _unitOfWork.AppointmentsRepositry.Update(mappedEmp);
                    _unitOfWork.Complete();
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError(string.Empty, $"Processing failed: {ex.Message}");
                    return View(appVm);
                }
                return Details(mappedEmp.Id, "Details");

                //return RedirectToAction(nameof(Details), new { id = mappedEmp.Id });
            }
            return View(appVm);
        }

        public IActionResult Details(int? id, string viewName = "Details")
        {
            if (!id.HasValue)
                return BadRequest();
            var appointment = _unitOfWork.AppointmentsRepositry.GetById(id.Value);
            if (appointment == null)
                return NotFound();
            var mappedapp = _mapper.Map<Appointment, AppointmentViewModel>(appointment);
            return View(viewName, mappedapp);
        }
        public IActionResult Edit(int? id)
        {
            return Details(id, "Edit");
        }
        // in order to do !!!!!!!!!!!!

        [HttpPost]
        public IActionResult Edit([FromRoute] int id, AppointmentViewModel appVm)
        {
            var appointment = _unitOfWork.AppointmentsRepositry.GetAll().FirstOrDefault(e => e.Id == id);


            if (id != appVm.Id)
                return BadRequest();
            if (ModelState.IsValid)
            {
                try
                {
                    var mappedapp = _mapper.Map<AppointmentViewModel, Appointment>(appVm);
                    _unitOfWork.AppointmentsRepositry.Update(mappedapp);
                    _unitOfWork.Complete();
                    return RedirectToAction(nameof(Index), new { patientId = appointment.PatientId });

                }
                catch (Exception ex)
                {
                    ModelState.AddModelError(string.Empty, ex.Message);
                }
            }
            return View(appVm);

        }
        public IActionResult Delete(int? id)
        {
            return Details(id, "Delete");
        }
        [HttpPost]
        public IActionResult Delete([FromRoute] int id, AppointmentViewModel appVm)
        {
            var appointment = _unitOfWork.AppointmentsRepositry.GetAll().FirstOrDefault(e => e.Id == id);
            

            if (id != appVm.Id)
                return BadRequest();
            if (ModelState.IsValid)
            {
                try
                {
                    var mappedapp = _mapper.Map<AppointmentViewModel, Appointment>(appVm);
                    _unitOfWork.AppointmentsRepositry.Delete(mappedapp);
                    _unitOfWork.Complete();
                    return RedirectToAction(nameof(Index), new { patientId = appointment.PatientId });
                }
                catch (Exception ex)
                {
                    ModelState.AddModelError(string.Empty, ex.Message);
                }
            }
            return View(appVm);

        }

        [HttpPost]
        public IActionResult AddNote(AppointmentViewModel viewModel)
        {
            if (ModelState.IsValid && !string.IsNullOrEmpty(viewModel.NewNote))
            {
                var appointment = _unitOfWork.AppointmentsRepositry.GetById(viewModel.Id);
                if (appointment == null)
                    return NotFound();

                var note = new Note
                {
                    Content = viewModel.NewNote,
                    AppointmentId = viewModel.Id
                };

                _unitOfWork.NotesRepositry.Add(note);
                var count = _unitOfWork.Complete();
                if (count > 0)
                    return RedirectToAction("Details", new { id = viewModel.Id });
            }

            var existingAppointment = _unitOfWork.AppointmentsRepositry.GetById(viewModel.Id);
            if (existingAppointment == null)
                return NotFound();
            var mappedApp = _mapper.Map<Appointment, AppointmentViewModel>(existingAppointment);
            return View("Details", mappedApp);
        }

        [HttpPost]
        public IActionResult DeleteNote(int noteId, int appointmentId)
        {
            var note = _unitOfWork.NotesRepositry.GetById(noteId);
            if (note == null || note.AppointmentId != appointmentId)
                return NotFound();

            _unitOfWork.NotesRepositry.Remove(note); // Uses corrected Remove method
            var count = _unitOfWork.Complete();

            return RedirectToAction("Details", new { id = appointmentId });
        }
    }
}
